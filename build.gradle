plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'jacoco'
    id 'checkstyle'
    id 'org.barfuin.gradle.jacocolog' version '2.0.0'
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = true
        html.required = true
    }
}

checkstyle {
    configFile = file("checkstyle/naver-checkstyle-rules.xml")
    configProperties = ["suppressionFile": "checkstyle/naver-checkstyle-suppressions.xml"]
}

group = 'com.gabia.weat'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    compileOnly 'org.projectlombok:lombok'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'

    // minio
    implementation 'io.minio:minio:8.3.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation 'commons-io:commons-io:2.11.0'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    implementation "com.querydsl:querydsl-core:5.0.0"
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}

tasks.named('test') {
    useJUnitPlatform()

    finalizedBy 'jacocoTestReport'
}

jacoco {
    toolVersion = '0.8.8'
}

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled false
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/GcellApiServerApplication.class",
                    "**/domain/**",
                    "**/dto/**",
                    "**/util/**",
                    "**/error/**",
                    "**/config/**",
                    "**/controller/**",
                    "**/repository/enums/**"
            ])
        }))
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.50
            }

            excludes = [
                    "*.GcellApiServerApplication",
                    "*.domain.*",
                    "*.dto.*",
                    "*.util.*",
                    "*.error.*",
                    "*.config.*",
                    "*.controller.*",
                    "*.repository.enums.*"
            ]
        }
    }
}